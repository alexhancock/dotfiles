let pathogen = expand('~/dotfiles/vim/autoload/pathogen.vim')
let vimtagged = expand('/local/vim/vimtagged.vim')
let viminfo = expand('/local/vim/vim-info.vim')

if filereadable(pathogen) | exe "source " . pathogen | endif
if filereadable(vimtagged) | exe "source " . vimtagged | endif
if filereadable(viminfo) | exe "source " . viminfo | endif

call pathogen#infect('~/dotfiles/vim/bundle')

syntax on
let mapleader = ","
filetype plugin indent on

" Copy indent from current line when starting a new line.
set smartindent
set showmode
set autoindent
set showmatch
set virtualedit=block

set encoding=utf-8
set fileencoding=utf-8
set laststatus=2
set statusline+=%F
set gfn=Monaco_for_Powerline:h14

" powerline config
set rtp+=~/dotfiles/vim/bundle/powerline/powerline/bindings/vim
" Line numbers
set number
set backspace=2
set clipboard+=unnamed  " use the clipboards of vim and osx
set paste               " Paste from osx or from vim
set go+=a               " visual selection automatically copied to the clipboard
" Tabs and spaces
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab


if has("gui_running")
    set guioptions=egmt
endif

" Color
colors distinguished

" ctrlp
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
let g:ctrlp_max_height=25

" NERDTree
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']

" Syntastic 
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_check_on_open=1
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'passive_filetypes': ['javascript'] }
                           
" Key bindings

" Indent blocks of text
vnoremap <C-]> >gv
vnoremap <C-[> <gv
vnoremap <Esc> <C-c>

" leader-w - Redistribute vertical splits
noremap <Leader>w <C-W>=
" leader-e - Reload buffer contents from version on disk
noremap <Leader>e :e<CR>
" leader-o - Copy path to current file to system clipboard with leader+o
noremap <Leader>o :let @*=expand("%:p")<CR>
" leader-n - NERDTree
noremap <Leader>n :NERDTreeToggle<CR>

" Up and down 10 lines with shift j+k
noremap <S-j> 10j
noremap <S-k> 10k

noremap <C-z> :undo<CR>
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" leader+l and k for splits
noremap <Leader>l :vsplit<CR>
noremap <Leader>k :split<CR>

" Moving between buffers with ctrl+hkjl
noremap <C-H> <C-W>h
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-L> <C-W>l

" Open a scratch buffer in a horizontal split
noremap <Leader>s :Sscratch<cr>

" Case insensitive write/quit
:command WQ wq
:command Wq wq
:command W w
:command Q q

" reload chrome canary's active tab with command-r
noremap <C-r> :silent !osascript -e "tell application \"Google Chrome Canary\" to tell the active tab of its first window to reload"<CR><CR>
command Collapse %s/\n/ /g

" Only use HKJL
noremap <Left>  <Nop>
noremap <Right> <Nop>
noremap <Up>    <Nop>
noremap <Down>  <Nop>

" Mapping of filetypes for syntax highlighting
au BufNewFile,BufRead *.html set filetype=php
au BufNewFile,BufRead *.json set ft=javascript
au BufNewFile,BufRead *.jst set filetype=jst
au BufNewFile,BufRead *.hjs set ft=html
au BufNewFile,BufRead *.mu set ft=html
au BufNewFile,BufRead *.hbs set ft=html
au BufNewFile,BufRead *.less set ft=css


" Swap
:set directory=~/vimswap

:call pathogen#helptags()
